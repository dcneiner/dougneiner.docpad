<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Doug Neiner</title>
    <link href="http://code.dougneiner.com/atom.xml" rel="self"/>
    <link href="http://code.dougneiner.com"/>
    <updated>2012-02-27T05:36:16Z</updated>
    <id>http://code.dougneiner.com</id>
    <author>
        <name>Doug Neiner</name>
        <email>doug@dougneiner.com</email>
    </author>

    
        
    
        
            <entry>
                <title>Using CSS Classes with jQuery to Control Visual State</title>
                
                <link href="http://code.dougneiner.com/coding/using-css-classes-for-states.html"/>
                
                <updated>2012-02-27T05:34:55Z</updated>
                <id>http://code.dougneiner.com/coding/using-css-classes-for-states.html</id>
                <content type="html"><h2>Strategy</h2>

<p>Instead of adjusting an HTML element's visual style with jQuery, make the same changes by strategically adding and removing classes. The classes can be applied on the component, region, and page level to control any static state of the host element or its decedents.</p>

<h2>Symptoms</h2>

<p>You can easily detect when to use this strategy when you discover yourself performing any of the following actions:</p>

<ul>
<li><p>You show, hide, or otherwise visually adjust two or more elements at the same time. The higher the number of elements changed, the greater the need for this strategy.</p></li>
<li><p>You need to run any number of jQuery selections via <code>$( selector )</code>, <code>.find()</code>, etc, just to adjust the visual display of those elements.</p></li>
<li><p>You use jQuery’s <a href="http://api.jquery.com/css"><code>.css()</code></a> method to change an element from one visual appearance to another predetermined appearance.</p></li>
</ul>

<h3>Problem 1</h3>

<p>The following code illustrates the first two of these symptoms:</p>

<div class='code-block code-lang-javascript'><div class="highlight"><pre><span class="nx">$</span><span class="p">(</span> <span class="nb">document</span> <span class="p">).</span><span class="nx">ready</span><span class="p">(</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="c1">// Three separate elements are selected</span>
    <span class="kd">var</span> <span class="nx">loadingMessage</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span> <span class="s2">&quot;#loadingMessage&quot;</span> <span class="p">),</span>
        <span class="nx">header</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span> <span class="s2">&quot;#header&quot;</span> <span class="p">),</span>
        <span class="nx">content</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span> <span class="s2">&quot;#content&quot;</span> <span class="p">);</span>

    <span class="c1">// Three CSS changes are made:</span>
    <span class="nx">loadingMessage</span><span class="p">.</span><span class="nx">show</span><span class="p">();</span>
    <span class="nx">header</span><span class="p">.</span><span class="nx">hide</span><span class="p">();</span>
    <span class="nx">content</span><span class="p">.</span><span class="nx">hide</span><span class="p">();</span>

    <span class="c1">// Lots of setup and async code here</span>

    <span class="kd">function</span> <span class="nx">someReadyCallback</span> <span class="p">()</span> <span class="p">{</span>
        <span class="c1">// Three additional CSS changes are made</span>
        <span class="nx">loadingMessage</span><span class="p">.</span><span class="nx">hide</span><span class="p">();</span>
        <span class="nx">header</span><span class="p">.</span><span class="nx">show</span><span class="p">();</span>
        <span class="nx">content</span><span class="p">.</span><span class="nx">show</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">});</span>
</pre></div>
</div>

<h3>Problem 2</h3>

<p>This short example illustrates the third symptom:</p>

<div class='code-block code-lang-javascript'><div class="highlight"><pre><span class="kd">var</span> <span class="nx">$notification</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span> <span class="s2">&quot;.notification&quot;</span> <span class="p">);</span>
<span class="k">if</span> <span class="p">(</span> <span class="nx">error</span> <span class="p">)</span> <span class="p">{</span>
    <span class="nx">$notification</span><span class="p">.</span><span class="nx">css</span><span class="p">(</span> <span class="s2">&quot;color&quot;</span><span class="p">,</span> <span class="s2">&quot;red&quot;</span> <span class="p">);</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">$notification</span><span class="p">.</span><span class="nx">css</span><span class="p">(</span> <span class="s2">&quot;color&quot;</span><span class="p">,</span> <span class="s2">&quot;green&quot;</span> <span class="p">);</span>
<span class="p">}</span>
</pre></div>
</div>

<h2>Solutions</h2>

<h3>Solution 1</h3>

<p>To visually adjust <strong>multiple items</strong> at the same time, follow these steps:</p>

<ol>
<li>Find a parent element that is shared by the elements you wish to adjust. Often you can use the <code>html</code> or <code>body</code> element, but it can be any element that contains all the target elements.</li>
<li>Determine a good CSS class name to describe the <em>combined</em> visual state of the elements, optionally add that class to the HTML and then manipulate it by using jQuery’s <a href="http://api.jquery.com/addClass"><code>addClass</code></a>, <a href="http://api.jquery.com/removeClass"><code>removeClass</code></a> and <a href="http://api.jquery.com/toggleClass"><code>toggleClass</code></a> methods. Prefixing these classes with <code>state-</code> is one way to signify their purpose.</li>
<li>Write CSS that scopes selections using a combination of the chosen parent element and the new class that is being applied to it.</li>
</ol>

<p>The CSS to fix our <code>loadingMessage</code> code would look like this:</p>

<div class='code-block code-lang-css'><div class="highlight"><pre><span class="c">/* Loading message is hidden by default, only shown during loading */</span>
<span class="nf">#loadingMessage</span> <span class="p">{</span> <span class="k">display</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span> <span class="p">}</span>
<span class="nc">.state-loading</span> <span class="nf">#loadingMessage</span> <span class="p">{</span> <span class="k">display</span><span class="o">:</span> <span class="k">block</span><span class="p">;</span> <span class="p">}</span>

<span class="c">/* Content and Header are hidden during loading */</span>
<span class="nc">.state-loading</span> <span class="nf">#content</span><span class="o">,</span>
<span class="nc">.state-loading</span> <span class="nf">#header</span> <span class="p">{</span> <span class="k">display</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span> <span class="p">}</span>
</pre></div>
</div>

<p>Since the page will always start in a loading state, we add the class of <code>loading</code> directly to the <code>&lt;body&gt;</code> element:</p>

<div class='code-block code-lang-html'><div class="highlight"><pre><span class="nt">&lt;body</span> <span class="na">class=</span><span class="s">&quot;state-loading&quot;</span><span class="nt">&gt;</span>
</pre></div>
</div>

<p>Finally, we delete almost all the code we had before, and just remove the <code>loading</code> class when loading is complete:</p>

<div class='code-block code-lang-javascript'><div class="highlight"><pre><span class="c1">// Lots of setup and async code here</span>

<span class="kd">function</span> <span class="nx">someReadyCallback</span> <span class="p">()</span> <span class="p">{</span>
    <span class="c1">// The app is loaded!</span>
    <span class="nx">$</span><span class="p">(</span> <span class="nb">document</span><span class="p">.</span><span class="nx">body</span> <span class="p">).</span><span class="nx">removeClass</span><span class="p">(</span> <span class="s2">&quot;state-loading&quot;</span> <span class="p">);</span>
<span class="p">}</span> 
</pre></div>
</div>

<h3>Solution 2</h3>

<p>To adjust the visual display of a <strong>single item</strong>, follow these steps:</p>

<ol>
<li>Any aspect of the visual display that will not change should be defined as the element’s default display.</li>
<li>Determine a good class name to describe the new visual state of the element, optionally add that class to the HTML for the element and then manipulate it by using jQuery’s class manipulation methods.</li>
<li>Write CSS that scopes the new styles to the chosen element with the new class applied. You can also use multiple class syntax if you the element you are styling is already defined by a class: <code>.notification.ready</code> (Multiple class syntax is not supported by IE6 and lower).</li>
</ol>

<p>If we assume the default state of our notification display is <code>green</code>, we can use the following CSS:</p>

<div class='code-block code-lang-css'><div class="highlight"><pre><span class="nc">.notification</span> <span class="p">{</span> <span class="k">color</span><span class="o">:</span> <span class="nb">green</span><span class="p">;</span> <span class="p">}</span>
<span class="nc">.notification.state-error</span> <span class="p">{</span> <span class="k">color</span><span class="o">:</span> <span class="nb">red</span><span class="p">;</span> <span class="p">}</span>
</pre></div>
</div>

<p>The following code will add the class of <code>state-error</code> when our variable <code>error</code> is true:</p>

<div class='code-block code-lang-javascript'><div class="highlight"><pre><span class="kd">var</span> <span class="nx">$notification</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span> <span class="s2">&quot;.notification&quot;</span> <span class="p">);</span>
<span class="nx">$notification</span><span class="p">.</span><span class="nx">toggleClass</span><span class="p">(</span> <span class="s2">&quot;state-error&quot;</span><span class="p">,</span> <span class="nx">error</span> <span class="p">);</span>
</pre></div>
</div>

<h2>Strengths</h2>

<ul>
<li><strong>Speed</strong> – By strategically using classes instead of direct manipulation, you remove the need to find, then adjust multiple elements. Very little code is needed to add or remove a class, replaced potentially slow moving code (selectors and traversal) with extremely efficient code. By leaving the bulk of the changes up to the browser, you also capitalize on the speed of the browser’s CSS engine.</li>
<li><strong>Separation of functionality and style</strong> – By only manipulating a class name, you leave the bulk of the visual definition in the CSS files – where they belong. In a team setting, this also allows a designer to modify the design without interacting with the JavaScript.</li>
<li><strong>Self describing code</strong> – If the class names you choose are descriptive, then where they are added and removed is afforded an immediate increased in clarity (For a caveat to this point, see the note about <a href="#education">Education</a> at the end of this post)</li>
<li><strong>Scoped events with delegation</strong> – You can leverage these class names to automatically filter out unwanted event triggers based on state. Look at the following example for ideas:</li>
</ul>

<div class='code-block code-lang-javascript'><div class="highlight"><pre><span class="nx">$</span><span class="p">(</span> <span class="nb">document</span> <span class="p">)</span>

    <span class="c1">// perform the save, but not if we are still</span>
    <span class="c1">// loading or in the middle of a save</span>
    <span class="p">.</span><span class="nx">on</span><span class="p">(</span> <span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="s2">&quot;body:not(.loading, .saving) button.save&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>        
        <span class="p">...</span>
    <span class="p">})</span>

    <span class="c1">// prevent forms from submitting</span>
    <span class="c1">// if a save is in progress</span>
    <span class="p">.</span><span class="nx">on</span><span class="p">(</span> <span class="s2">&quot;submit&quot;</span><span class="p">,</span> <span class="s2">&quot;body.saving&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span> <span class="nx">e</span> <span class="p">)</span> <span class="p">{</span>
        <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
    <span class="p">})</span>

    <span class="c1">// only run the setup one time per element</span>
    <span class="p">.</span><span class="nx">on</span><span class="p">(</span> <span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="s2">&quot;.widget:not(.widget-setup)&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="p">...</span>
        <span class="nx">$</span><span class="p">(</span> <span class="k">this</span> <span class="p">).</span><span class="nx">addClass</span><span class="p">(</span> <span class="s2">&quot;widget-setup&quot;</span> <span class="p">);</span>
    <span class="p">});</span>
</pre></div>
</div>

<h2>Notes</h2>

<h3>Transitions</h3>

<p>Often the move from one state to another is accompanied by some sort of animation. Since much of the time these transitions are visual finesse, I suggest using CSS3 transitions and animations to implement the transitions. The fallback in unsupported browsers will simply be an instant change from one state to the next. In situations where the animation is crucial to the interaction, you may not be able to leverage everything covered in this article.</p>

<h3>Using Attributes instead of Classes</h3>

<p>You can also use attribute changes to control flow, though I haven't done any speed comparisons between the two methods. Here is an example using a custom HTML5 data attribute named <code>data-state</code>:</p>

<div class='code-block code-lang-html'><div class="highlight"><pre><span class="nt">&lt;body</span> <span class="na">data-state=</span><span class="s">&quot;loading&quot;</span><span class="nt">&gt;</span>
</pre></div>
</div>

<div class='code-block code-lang-css'><div class="highlight"><pre><span class="nt">body</span><span class="o">[</span><span class="nt">data-state</span><span class="o">=</span><span class="s2">&quot;loading&quot;</span><span class="o">]</span> <span class="nf">#loadingMessage</span><span class="o">,</span>
<span class="nt">body</span><span class="o">[</span><span class="nt">data-state</span><span class="o">=</span><span class="s2">&quot;saving&quot;</span><span class="o">]</span> <span class="nf">#savingMessage</span> <span class="p">{</span> <span class="k">display</span><span class="o">:</span> <span class="k">block</span><span class="p">;</span> <span class="p">}</span>
</pre></div>
</div>

<div class='code-block code-lang-javascript'><div class="highlight"><pre><span class="nx">$body</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span> <span class="s2">&quot;state&quot;</span><span class="p">,</span> <span class="s2">&quot;ready&quot;</span> <span class="p">);</span> <span class="c1">// From loading to ready</span>
<span class="c1">// ... other code ...</span>
<span class="nx">$body</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span> <span class="s2">&quot;state&quot;</span><span class="p">,</span> <span class="s2">&quot;saving&quot;</span> <span class="p">);</span> <span class="c1">// Switch to saving</span>
</pre></div>
</div>

<h3 id="education">Education</h3>

<p>If you work in a team environment, it would be wise to discuss this strategy with your team before implementing. JavaScript developers who do not work with CSS frequently may not understand the ramifications of the <code>addClass</code> and <code>removeClass</code> methods throughout your code.</p>
                
                </content>
            </entry>
        
    
        
    
        
    
        
    
        
    
        
            <entry>
                <title>Essential JavaScript Design Patterns for Beginners</title>
                
                <link href="http://addyosmani.com/resources/essentialjsdesignpatterns/book/"/>
                
                <updated>2012-02-18T20:42:09Z</updated>
                <id>http://code.dougneiner.com/learning/essential-javascript-design-patterns.html</id>
                <content type="html"><p>I really enjoyed Addy's presentation at the jQuery UK Conference where he touched on just a few patterns mentioned in this free online book. I haven't read through it yet, but I am super excited to learn more about some of these patterns. I think I will also find out the names for a number of the patterns I already use!</p>
                
                    <p><a href="http://addyosmani.com/resources/essentialjsdesignpatterns/book/">View Link &rarr;</a></p>
                
                </content>
            </entry>
        
    
        
    
        
    
        
    
        
            <entry>
                <title>Stop (Mis)Using Return False</title>
                
                <link href="http://code.dougneiner.com/coding/stop-using-return-false.html"/>
                
                <updated>2010-09-20T05:00:00Z</updated>
                <id>http://code.dougneiner.com/coding/stop-using-return-false.html</id>
                <content type="html"><p>Probably one of the first topics covered when you get started learning about jQuery events is the concept of canceling the browser’s default behavior. For instance, a beginner click tutorial may include this:</p>

<div class='code-block code-lang-javascript'><div class="highlight"><pre><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;a.toggle&quot;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#mydiv&quot;</span><span class="p">).</span><span class="nx">toggle</span><span class="p">();</span>
    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span> <span class="c1">// Prevent browser from visiting `#`</span>
<span class="p">});</span>
</pre></div>
</div>

<p>This function toggles the hiding and displaying of <code>#mydiv</code>, then cancels the browser’s default behavior of visiting the href of the anchor tag.</p>

<p>It is in these very first examples that bad habits are formed as users continue to use <code>return false;</code> whenever they want to cancel the default browser action. I am going to cover two very important topics in this article relating to the canceling of browser events.</p>

<p><a href="http://fuelyourcoding.com/jquery-events-stop-misusing-return-false/">Continue reading at Fuel Your Coding…</a></p>

<p><em>This article was written for and published at Fuel Your Coding, on September 20, 2010. The material covered still applies to jQuery code written today.</em></p>
                
                </content>
            </entry>
        
    
        
            <entry>
                <title>Introduction to Stateful Plugins and the Widget Factory</title>
                
                <link href="http://code.dougneiner.com/coding/introduction-to-stateful-widgets.html"/>
                
                <updated>2010-05-21T05:00:00Z</updated>
                <id>http://code.dougneiner.com/coding/introduction-to-stateful-widgets.html</id>
                <content type="html"><p>The jQuery UI Widget Factory is a separate component of the <a href="http://jqueryui.com">jQuery UI</a> Library that provides an easy, object oriented way to create stateful jQuery plugins. Plugins created using the Widget Factory can be simple or very robust as evidenced by the official jQuery UI widgets, each of which are built on top of the Widget Factory. This article will first look briefly at why you might want to use the Widget Factory, then present an in depth walkthrough of creating a stateful plugin using the Factory.</p>

<p><a href="http://msdn.microsoft.com/en-us/scriptjunkie/ff706600.aspx">Continue reading at Script Junkie…</a></p>

<p><em>This article was written for and published at Script Junkie, on May 21, 2010. This article is current for jQuery UI 1.8, though 1.9 will bring a number of changes when released.</em></p>
                
                </content>
            </entry>
        
    
</feed>